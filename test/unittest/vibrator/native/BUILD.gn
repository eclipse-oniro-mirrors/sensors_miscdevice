# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("./../../../../miscdevice.gni")

ohos_unittest("VibratorAgentTest") {
  module_out_path = "miscdevice/miscdevice/native"

  sources = [ "vibrator_agent_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/inner_api/vibrator",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/frameworks/native/vibrator:vibrator_target",
    "$SUBSYSTEM_DIR/utils/common:libmiscdevice_utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "c_utils:utils",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
  ]

  if (miscdevice_feature_vibrator_custom) {
    resource_config_file =
        "$SUBSYSTEM_DIR/test/unittest/vibrator/native/resource/ohos_test.xml"
  }
}

ohos_unittest("VibratorAgentSeekTest") {
  module_out_path = "miscdevice/miscdevice/native"

  sources = [ "vibrator_agent_seek_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/inner_api/vibrator",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/frameworks/native/vibrator:vibrator_target",
    "$SUBSYSTEM_DIR/utils/common:libmiscdevice_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
  ]

  if (miscdevice_feature_vibrator_custom) {
    resource_config_file =
        "$SUBSYSTEM_DIR/test/unittest/vibrator/native/resource/ohos_test.xml"
  }
}

ohos_unittest("VibratorAgentModulationTest") {
  module_out_path = "miscdevice/miscdevice/native"

  sources = [ "vibrator_agent_modulation_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/inner_api/vibrator",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  deps = [
    "$SUBSYSTEM_DIR/frameworks/native/vibrator:vibrator_target",
    "$SUBSYSTEM_DIR/utils/common:libmiscdevice_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
  ]

  if (miscdevice_feature_vibrator_custom) {
    resource_config_file =
        "$SUBSYSTEM_DIR/test/unittest/vibrator/native/resource/ohos_test.xml"
  }
}

ohos_unittest("VibratorServiceTest") {
  module_out_path = "miscdevice/miscdevice/native"

  sources = [ "vibrator_service_test.cpp" ]

  include_dirs = [
    "$SUBSYSTEM_DIR/interfaces/inner_api/light",
    "$SUBSYSTEM_DIR/interfaces/inner_api/vibrator",
    "$SUBSYSTEM_DIR/services/miscdevice_service/include",
    "$SUBSYSTEM_DIR/services/miscdevice_service/hdi_connection/adapter/include",
    "$SUBSYSTEM_DIR/services/miscdevice_service/hdi_connection/interface/include",
    "$SUBSYSTEM_DIR/utils/common/include",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "$SUBSYSTEM_DIR/frameworks/native/vibrator:miscdevice_service_stub",
    "$SUBSYSTEM_DIR/services/miscdevice_service:libmiscdevice_service_static",
    "$SUBSYSTEM_DIR/utils/common:libmiscdevice_utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "drivers_interface_vibrator:libvibrator_proxy_2.0",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (miscdevice_feature_vibrator_input_method_enable) {
    external_deps += [
      "bundle_framework:appexecfwk_core",
    ]
  }

  defines = miscdevice_default_defines
}

group("unittest") {
  testonly = true
  deps = [
    ":VibratorAgentSeekTest",
    ":VibratorAgentTest",
    ":VibratorAgentModulationTest",
    ":VibratorServiceTest",
  ]
}
